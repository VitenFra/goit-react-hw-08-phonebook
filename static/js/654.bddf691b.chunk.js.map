{"version":3,"file":"static/js/654.bddf691b.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.css?3a02","components/Phonebook/Phonebook.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/PatchForm/PatchForm.module.css?ef04","components/PatchForm/PatchForm.js","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.js","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","views/ContactsView.js","webpack://react-homework-template/./src/views/Views.module.css?da62"],"sourcesContent":["export const getFilter = state => state.contacts.filter;\r\nexport const getContacts = state => state.contacts.items;\r\n\r\nexport const getFilteredContacts = state =>\r\n  getContacts(state).filter(contact =>\r\n    contact.name.toLowerCase().includes(getFilter(state).toLowerCase())\r\n  );\r\nexport const getError = state => state.contacts.error;\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getIsFetchingContacts = state => state.contacts.isFetchingContacts;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Phonebook_form__-KsMS\",\"label\":\"Phonebook_label__irvRj\",\"input\":\"Phonebook_input__bjs9I\",\"title\":\"Phonebook_title__D9Klm\"};","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\r\nimport s from './Phonebook.module.css';\r\nimport toast from 'react-hot-toast';\r\n\r\nimport Button from '@mui/material/Button';\r\n\r\n\r\nfunction Phonebook() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  const handleInput = evt => {\r\n    switch (evt.currentTarget.id) {\r\n      case 'nameAdd':\r\n        setName(evt.currentTarget.value);\r\n        break;\r\n      case 'numberAdd':\r\n        setNumber(evt.currentTarget.value);\r\n        break;\r\n      default:\r\n        console.log('wrong name');\r\n    }\r\n  };\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n    addContactToContacts(name, number);\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const addContactToContacts = (name, number) => {\r\n    const isNameInContacts = contacts\r\n      .map(({ name }) => name.toLowerCase())\r\n      .includes(name.toLowerCase());\r\n\r\n    if (isNameInContacts) {\r\n      toast.error(`${name} вже є в контактах`, {\r\n\r\n        position: 'top',\r\n      });\r\n    } else {\r\n      dispatch(contactsOperations.addContact({ name, number }));\r\n      reset();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <h2 className={s.title}>Додати</h2>\r\n      <label className={s.label} htmlFor=\"nameAdd\">\r\n      Ім'я\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        onChange={handleInput}\r\n        name=\"name\"\r\n        value={name}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Назва може містити лише літери, апостроф, тире та пробіли. Наприклад Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n        className={s.input}\r\n        id=\"nameAdd\"\r\n      />\r\n\r\n      <label className={s.label} htmlFor=\"numberAdd\">\r\n      Номер\r\n      </label>\r\n      <input\r\n        type=\"tel\"\r\n        onChange={handleInput}\r\n        name=\"number\"\r\n        value={number}\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефону має складатися з цифр і може містити пробіли, тире, круглі дужки та може починатися з +\"\r\n        required\r\n        className={s.input}\r\n        id=\"numberAdd\"\r\n      />\r\n\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n       \r\n            \r\n          \r\n        \r\n        \r\n      >\r\n        Додати\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Phonebook;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__C2QeY\",\"input\":\"Filter_input__SbaYJ\",\"title\":\"Filter_title__i-Ll2\"};","import { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsActions, contactsSelectors } from 'redux/contacts';\r\nimport s from './Filter.module.css';\r\n\r\nexport const Filter = () => {\r\n  const filter = useSelector(contactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <h2 className={s.title}>Список контактів</h2>\r\n      <label className={s.label}>\r\n      Знайти контакти за іменем\r\n        <input\r\n          type=\"text\"\r\n          onChange={evt =>\r\n            dispatch(contactsActions.setFilter(evt.currentTarget.value))\r\n          }\r\n          name=\"filter\"\r\n          value={filter}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Назва може містити лише літери, апостроф, тире та пробіли. Наприклад Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n          className={s.input}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__kEOBz\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"PatchForm_form__34JP3\",\"label\":\"PatchForm_label__MlAaL\",\"input\":\"PatchForm_input__5Glhh\",\"title\":\"PatchForm_title__Pk0gd\",\"buttonContainer\":\"PatchForm_buttonContainer__FeS9m\"};","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\r\nimport s from './PatchForm.module.css';\r\nimport { Circles } from 'react-loader-spinner';\r\nimport Button from '@mui/material/Button';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction PatchForm({ onClick, id }) {\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  const contactToEdit = contacts.find(contact => contact.id === id);\r\n\r\n  const [name, setName] = useState(contactToEdit.name);\r\n  const [number, setNumber] = useState(contactToEdit.number);\r\n\r\n  const loading = useSelector(contactsSelectors.getLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleInput = evt => {\r\n    switch (evt.currentTarget.id) {\r\n      case 'namePatch':\r\n        setName(evt.currentTarget.value);\r\n        break;\r\n      case 'numberPatch':\r\n        setNumber(evt.currentTarget.value);\r\n        break;\r\n      default:\r\n        console.log('wrong name');\r\n    }\r\n  };\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n    dispatch(contactsOperations.patchContact({ name, number, id }));\r\n    onClick();\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <h2 className={s.title}>Редагувати</h2>\r\n      <label className={s.label} htmlFor=\"namePatch\">\r\n      Ім'я\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        onChange={handleInput}\r\n        name=\"name\"\r\n        value={name}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Назва може містити лише літери, апостроф, тире та пробіли. Наприклад Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n        className={s.input}\r\n        id=\"namePatch\"\r\n      />\r\n\r\n      <label className={s.label} htmlFor=\"numberPatch\">\r\n      Номер\r\n      </label>\r\n      <input\r\n        type=\"tel\"\r\n        onChange={handleInput}\r\n        name=\"number\"\r\n        value={number}\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефону має складатися з цифр і може містити пробіли, тире, круглі дужки та може починатися з +\"\r\n        required\r\n        className={s.input}\r\n        id=\"numberPatch\"\r\n      />\r\n\r\n      <div className={s.buttonContainer}>\r\n        <Button\r\n          type=\"button\"\r\n          variant=\"contained\"\r\n        \r\n          onClick={onClick}\r\n        >\r\n          Скасувати\r\n        </Button>\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          endIcon={\r\n            loading ? (\r\n              <Circles\r\n              />\r\n            ) : (\r\n              <EditIcon />\r\n            )\r\n          }\r\n          \r\n        >\r\n          Редагувати\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default PatchForm;\r\n\r\nPatchForm.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"Modal_Overlay__zzJuL\",\"Modal\":\"Modal_Modal__t5DWS\"};","import React, { useEffect } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport PatchForm from 'components/PatchForm';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Modal.module.css';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nfunction Modal({ onClick, id }) {\r\n  useEffect(() => {\r\n    const onClose = e => {\r\n      if (e.code === 'Escape') {\r\n        onClick();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', onClose);\r\n    return function clean() {\r\n      document.removeEventListener('keydown', onClose);\r\n    };\r\n  });\r\n\r\n  return createPortal(\r\n    <div className={s.Overlay}>\r\n      <div className={s.Modal}>\r\n        <PatchForm onClick={onClick} id={id} />\r\n      </div>\r\n    </div>,\r\n    modalRoot\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n\r\nModal.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactListItem_item__1bWYl\",\"name\":\"ContactListItem_name__HKIUR\",\"button\":\"ContactListItem_button__d1GLr\",\"contactContainer\":\"ContactListItem_contactContainer__L2cQS\"};","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { contactsOperations } from 'redux/contacts';\r\nimport s from './ContactListItem.module.css';\r\nimport Button from '@mui/material/Button';\r\n\r\nimport Fab from '@mui/material/Fab';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactListItem = ({ id, name, number, handleShowModal }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <li className={s.item}>\r\n      <Fab\r\n        size=\"small\"\r\n        color=\"primary\"\r\n        aria-label=\"edit\"\r\n        className={s.fab}\r\n        onClick={handleShowModal}\r\n        id={id}\r\n      >\r\n        <EditIcon />\r\n      </Fab>\r\n      <div className={s.contactContainer}>\r\n        <span className={s.name}>{name}</span>\r\n        <span className={s.number}>{number}</span>\r\n      </div>\r\n\r\n      <Button\r\n        className={s.button}\r\n        id={id}\r\n        name={name}\r\n        variant=\"outlined\"\r\n\r\n        \r\n        onClick={evt => {\r\n          dispatch(\r\n            contactsOperations.deleteContact({\r\n              id: evt.currentTarget.id,\r\n              name: evt.currentTarget.name,\r\n            })\r\n          );\r\n        }}\r\n      >\r\n        Видалити\r\n      </Button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  loader: PropTypes.bool.isRequired,\r\n  handleShowModal: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\r\nimport s from './ContactList.module.css';\r\nimport Modal from 'components/Modal';\r\nimport ContactListItem from '../ContactListItem';\r\n\r\nconst ContactList = () => {\r\n  const [patchContactId, setPatchContactId] = useState(null);\r\n\r\n  const allContacts = useSelector(contactsSelectors.getContacts);\r\n  const filteredContacts = useSelector(contactsSelectors.getFilteredContacts);\r\n  const loading = useSelector(contactsSelectors.getLoading);\r\n  const isFetchingContacts = useSelector(\r\n    contactsSelectors.getIsFetchingContacts\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const handleHideModal = e => {\r\n    setPatchContactId(null);\r\n  };\r\n\r\n  const handleShowModal = e => {\r\n    setPatchContactId(e.currentTarget.id);\r\n  };\r\n\r\n  if (filteredContacts.length === 0 && allContacts.length !== 0) {\r\n    return <p>Не знайшов жодного контакту, спробуй щось інше</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ul className={s.list}>\r\n        {filteredContacts.map(({ name, number, id }) => (\r\n          <ContactListItem\r\n            key={id}\r\n            id={id}\r\n            name={name}\r\n            number={number}\r\n            loader={loading?.id === id}\r\n            handleShowModal={handleShowModal}\r\n          />\r\n        ))}\r\n      </ul>\r\n\r\n      {allContacts.length === 0 && !isFetchingContacts && (\r\n        <p>У вас немає жодного контакту, будь ласка, додайте свої контакти</p>\r\n      )}\r\n\r\n      {patchContactId && (\r\n        <Modal onClick={handleHideModal} id={patchContactId} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import Phonebook from 'components/Phonebook';\r\nimport Filter from 'components/Filter';\r\nimport ContactList from 'components/ContactList';\r\nimport { useSelector } from 'react-redux';\r\nimport { contactsSelectors } from 'redux/contacts';\r\nimport s from './Views.module.css';\r\n\r\nconst ContactsView = () => {\r\n  const error = useSelector(contactsSelectors.getError);\r\n  return (\r\n    <div className={s.container}>\r\n      <Phonebook />\r\n      <div>\r\n        <Filter />\r\n        {error ? <h2>{error}, спробуйте пізніше</h2> : <ContactList />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactsView;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Views_title__j-NYt\",\"form\":\"Views_form__FmPzs\",\"label\":\"Views_label__yTHyd\",\"input\":\"Views_input__Xzt-8\",\"container\":\"Views_container__oZKo8\"};"],"names":["getFilter","state","contacts","filter","getContacts","items","getFilteredContacts","contact","name","toLowerCase","includes","getError","error","getLoading","loading","getIsFetchingContacts","isFetchingContacts","useState","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","handleInput","evt","currentTarget","id","value","console","log","addContactToContacts","map","toast","position","contactsOperations","className","s","onSubmit","preventDefault","htmlFor","type","onChange","pattern","title","required","Button","variant","contactsActions","onClick","contactToEdit","find","endIcon","Edit","modalRoot","document","querySelector","useEffect","onClose","e","code","addEventListener","removeEventListener","createPortal","handleShowModal","Fab","size","color","patchContactId","setPatchContactId","allContacts","filteredContacts","length","loader"],"sourceRoot":""}